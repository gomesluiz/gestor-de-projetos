"use strict";

$(function () {
  var chart1 = new Chart(document.getElementById('statistics-chart-1').getContext("2d"), {
    type: 'line',
    data: {
      labels: ['2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02'],
      datasets: [{
        label: 'Sales',
        data: [137, 187, 85, 72, 85, 120, 183, 89, 143, 105, 116, 77, 76, 180, 158, 172, 143, 164],
        borderWidth: 2,
        backgroundColor: 'rgba(87, 181, 255, .85)',
        borderColor: 'rgba(87, 181, 255, 1)',
        pointBackgroundColor: 'rgba(0,0,0,0)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 10
      }]
    },
    options: {
      scales: {
        xAxes: [{
          gridLines: {
            display: false
          },
          ticks: {
            fontColor: '#aaa',
            autoSkipPadding: 50
          }
        }],
        yAxes: [{
          gridLines: {
            display: false
          },
          ticks: {
            fontColor: '#aaa',
            maxTicksLimit: 5
          }
        }]
      },
      legend: {
        display: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart2 = new Chart(document.getElementById('statistics-chart-2').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 60],
        borderWidth: 1,
        backgroundColor: 'rgba(103, 58, 183, .2)',
        borderColor: 'rgba(103, 58, 183, 1)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart3 = new Chart(document.getElementById('statistics-chart-3').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 60],
        borderWidth: 1,
        backgroundColor: 'rgba(206, 221, 54, .2)',
        borderColor: 'rgba(206, 221, 54, 1)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart4 = new Chart(document.getElementById('statistics-chart-4').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 60],
        borderWidth: 1,
        backgroundColor: 'rgba(136, 151, 170, .2)',
        borderColor: 'rgba(136, 151, 170, 1)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  }); // Resizing charts

  function resizeCharts() {
    chart1.resize();
    chart2.resize();
    chart3.resize();
    chart4.resize();
  } // Initial resize


  resizeCharts(); // For performance reasons resize charts on delayed resize event

  window.layoutHelpers.on('resize.dashboard-3', resizeCharts);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2Rhc2hib2FyZHNfZGFzaGJvYXJkLTMuanMiXSwibmFtZXMiOlsiJCIsImNoYXJ0MSIsIkNoYXJ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJ0eXBlIiwiZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJib3JkZXJXaWR0aCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwicG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEJvcmRlckNvbG9yIiwicG9pbnRSYWRpdXMiLCJvcHRpb25zIiwic2NhbGVzIiwieEF4ZXMiLCJncmlkTGluZXMiLCJkaXNwbGF5IiwidGlja3MiLCJmb250Q29sb3IiLCJhdXRvU2tpcFBhZGRpbmciLCJ5QXhlcyIsIm1heFRpY2tzTGltaXQiLCJsZWdlbmQiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImNoYXJ0MiIsImxpbmVUZW5zaW9uIiwidG9vbHRpcHMiLCJlbmFibGVkIiwiY2hhcnQzIiwiY2hhcnQ0IiwicmVzaXplQ2hhcnRzIiwicmVzaXplIiwid2luZG93IiwibGF5b3V0SGVscGVycyIsIm9uIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxDQUFDLENBQUMsWUFBVztBQUNYLE1BQUlDLE1BQU0sR0FBRyxJQUFJQyxLQUFKLENBQVVDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixvQkFBeEIsRUFBOENDLFVBQTlDLENBQXlELElBQXpELENBQVYsRUFBMEU7QUFDckZDLElBQUFBLElBQUksRUFBRSxNQUQrRTtBQUVyRkMsSUFBQUEsSUFBSSxFQUFFO0FBQ0pDLE1BQUFBLE1BQU0sRUFBRSxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQXdELFNBQXhELEVBQW1FLFNBQW5FLEVBQThFLFNBQTlFLEVBQXlGLFNBQXpGLEVBQW9HLFNBQXBHLEVBQStHLFNBQS9HLEVBQTBILFNBQTFILEVBQXFJ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UUFBQUEsT0FBTyxFQUFFO0FBREQsT0FaSDtBQWVQTCxNQUFBQSxVQUFVLEVBQUUsS0FmTDtBQWdCUEMsTUFBQUEsbUJBQW1CLEVBQUU7QUFoQmQ7QUFqQjRFLEdBQTFFLENBQWIsQ0F4SFcsQ0E2Slg7O0FBRUEsV0FBU08sWUFBVCxHQUF3QjtBQUN0Qm5DLElBQUFBLE1BQU0sQ0FBQ29DLE1BQVA7QUFDQVAsSUFBQUEsTUFBTSxDQUFDTyxNQUFQO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0csTUFBUDtBQUNBRixJQUFBQSxNQUFNLENBQUNFLE1BQVA7QUFDRCxHQXBLVSxDQXNLWDs7O0FBQ0FELEVBQUFBLFlBQVksR0F2S0QsQ0F5S1g7O0FBQ0FFLEVBQUFBLE1BQU0sQ0FBQ0MsYUFBUCxDQUFxQkMsRUFBckIsQ0FBd0Isb0JBQXhCLEVBQThDSixZQUE5QztBQUNELENBM0tBLENBQUQiLCJzb3VyY2VzQ29udGVudCI6WyIkKGZ1bmN0aW9uKCkge1xuICB2YXIgY2hhcnQxID0gbmV3IENoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aXN0aWNzLWNoYXJ0LTEnKS5nZXRDb250ZXh0KFwiMmRcIiksIHtcbiAgICB0eXBlOiAnbGluZScsXG4gICAgZGF0YToge1xuICAgICAgbGFiZWxzOiBbJzIwMTYtMDknLCAnMjAxNi0xMCcsICcyMDE2LTExJywgJzIwMTYtMTInLCAnMjAxNy0wMScsICcyMDE3LTAyJywgJzIwMTctMDMnLCAnMjAxNy0wNCcsICcyMDE3LTA1JywgJzIwMTctMDYnLCAnMjAxNy0wNycsICcyMDE3LTA4JywgJzIwMTctMDknLCAnMjAxNy0xMCcsICcyMDE3LTExJywgJzIwMTctMTInLCAnMjAxOC0wMScsICcyMDE4LTAyJ10sXG4gICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgbGFiZWw6ICdTYWxlcycsXG4gICAgICAgIGRhdGE6IFsxMzcsIDE4NywgODUsIDcyLCA4NSwgMTIwLCAxODMsIDg5LCAxNDMsIDEwNSwgMTE2LCA3NywgNzYsIDE4MCwgMTU4LCAxNzIsIDE0MywgMTY0XSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoODcsIDE4MSwgMjU1LCAuODUpJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDg3LCAxODEsIDI1NSwgMSknLFxuICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvaW50UmFkaXVzOiAxMCxcbiAgICAgIH1dLFxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGZvbnRDb2xvcjogJyNhYWEnLFxuICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiA1MFxuICAgICAgICAgIH1cbiAgICAgICAgfV0sXG4gICAgICAgIHlBeGVzOiBbe1xuICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBmb250Q29sb3I6ICcjYWFhJyxcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDVcbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0MiA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC0yJykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ2xpbmUnLFxuICAgIGRhdGE6IHtcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBkYXRhOiBbMjQsIDkyLCA3NywgOTAsIDkxLCA3OCwgMjgsIDQ5LCAyMywgODEsIDE1LCA5NywgOTQsIDE2LCA5OSwgNjEsXG4gICAgICAgICAgMzgsIDM0LCA0OCwgMywgNSwgMjEsIDI3LCA0LCAzMywgNDAsIDQ2LCA0NywgNDgsIDYwXG4gICAgICAgIF0sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDEwMywgNTgsIDE4MywgLjIpJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDEwMywgNTgsIDE4MywgMSknLFxuICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvaW50UmFkaXVzOiAxLFxuICAgICAgICBsaW5lVGVuc2lvbjogMFxuICAgICAgfV0sXG4gICAgICBsYWJlbHM6IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXVxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0MyA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC0zJykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ2xpbmUnLFxuICAgIGRhdGE6IHtcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBkYXRhOiBbMjQsIDkyLCA3NywgOTAsIDkxLCA3OCwgMjgsIDQ5LCAyMywgODEsIDE1LCA5NywgOTQsIDE2LCA5OSwgNjEsXG4gICAgICAgICAgMzgsIDM0LCA0OCwgMywgNSwgMjEsIDI3LCA0LCAzMywgNDAsIDQ2LCA0NywgNDgsIDYwXG4gICAgICAgIF0sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDIwNiwgMjIxLCA1NCwgLjIpJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDIwNiwgMjIxLCA1NCwgMSknLFxuICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvaW50UmFkaXVzOiAxLFxuICAgICAgICBsaW5lVGVuc2lvbjogMFxuICAgICAgfV0sXG4gICAgICBsYWJlbHM6IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXVxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0NCA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC00JykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ2xpbmUnLFxuICAgIGRhdGE6IHtcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBkYXRhOiBbMjQsIDkyLCA3NywgOTAsIDkxLCA3OCwgMjgsIDQ5LCAyMywgODEsIDE1LCA5NywgOTQsIDE2LCA5OSwgNjEsXG4gICAgICAgICAgMzgsIDM0LCA0OCwgMywgNSwgMjEsIDI3LCA0LCAzMywgNDAsIDQ2LCA0NywgNDgsIDYwXG4gICAgICAgIF0sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDEzNiwgMTUxLCAxNzAsIC4yKScsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgxMzYsIDE1MSwgMTcwLCAxKScsXG4gICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgIGxpbmVUZW5zaW9uOiAwXG4gICAgICB9XSxcbiAgICAgIGxhYmVsczogWycnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJyddXG4gICAgfSxcblxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNjYWxlczoge1xuICAgICAgICB4QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgfV0sXG4gICAgICAgIHlBeGVzOiBbe1xuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICByZXNwb25zaXZlOiBmYWxzZSxcbiAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlXG4gICAgfVxuICB9KTtcblxuICAvLyBSZXNpemluZyBjaGFydHNcblxuICBmdW5jdGlvbiByZXNpemVDaGFydHMoKSB7XG4gICAgY2hhcnQxLnJlc2l6ZSgpO1xuICAgIGNoYXJ0Mi5yZXNpemUoKTtcbiAgICBjaGFydDMucmVzaXplKCk7XG4gICAgY2hhcnQ0LnJlc2l6ZSgpO1xuICB9XG5cbiAgLy8gSW5pdGlhbCByZXNpemVcbiAgcmVzaXplQ2hhcnRzKCk7XG5cbiAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgcmVzaXplIGNoYXJ0cyBvbiBkZWxheWVkIHJlc2l6ZSBldmVudFxuICB3aW5kb3cubGF5b3V0SGVscGVycy5vbigncmVzaXplLmRhc2hib2FyZC0zJywgcmVzaXplQ2hhcnRzKTtcbn0pO1xuIl0sImZpbGUiOiJqcy9kYXNoYm9hcmRzX2Rhc2hib2FyZC0zLmVzNS5qcyJ9
