"use strict";

$(function () {
  var chart1 = new Chart(document.getElementById('statistics-chart-1').getContext("2d"), {
    type: 'line',
    data: {
      labels: ['2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02'],
      datasets: [{
        label: 'Visits',
        data: [14, 37, 30, 46, 80, 42, 33, 13, 25, 6, 88, 96],
        borderWidth: 1,
        backgroundColor: 'rgba(38, 180, 255, 0.1)',
        borderColor: '#26B4FF',
        fill: false
      }, {
        label: 'Returns',
        data: [56, 17, 19, 96, 73, 46, 67, 40, 77, 43, 64, 54],
        borderWidth: 1,
        borderDash: [5, 5],
        backgroundColor: 'rgba(136, 151, 170, 0.1)',
        borderColor: '#8897aa'
      }]
    },
    options: {
      scales: {
        xAxes: [{
          gridLines: {
            display: false
          },
          ticks: {
            fontColor: '#aaa',
            autoSkipPadding: 50
          }
        }],
        yAxes: [{
          gridLines: {
            display: false
          },
          ticks: {
            fontColor: '#aaa',
            maxTicksLimit: 5
          }
        }]
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart2 = new Chart(document.getElementById('statistics-chart-2').getContext("2d"), {
    type: 'bar',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 18],
        borderWidth: 0,
        backgroundColor: '#673AB7'
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart3 = new Chart(document.getElementById('statistics-chart-3').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 18],
        borderWidth: 1,
        backgroundColor: 'rgba(0,0,0,0)',
        borderColor: '#009688',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart4 = new Chart(document.getElementById('statistics-chart-4').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 60],
        borderWidth: 1,
        backgroundColor: 'rgba(206, 221, 54, 0)',
        borderColor: 'rgba(206, 221, 54, 1)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart5 = new Chart(document.getElementById('statistics-chart-5').getContext("2d"), {
    type: 'line',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 60],
        borderWidth: 1,
        backgroundColor: 'rgba(136, 151, 170, .2)',
        borderColor: 'rgba(136, 151, 170, 1)',
        pointBorderColor: 'rgba(0,0,0,0)',
        pointRadius: 1,
        lineTension: 0
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      tooltips: {
        enabled: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart6 = new Chart(document.getElementById('statistics-chart-6').getContext("2d"), {
    type: 'pie',
    data: {
      labels: ['Desktops', 'Smartphones', 'Tablets'],
      datasets: [{
        data: [1225, 654, 211],
        backgroundColor: ['rgba(99,125,138,0.5)', 'rgba(28,151,244,0.5)', 'rgba(2,188,119,0.5)'],
        borderColor: ['#647c8a', '#2196f3', '#02bc77'],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        position: 'right',
        labels: {
          boxWidth: 12
        }
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart7 = new Chart(document.getElementById('statistics-chart-7').getContext("2d"), {
    type: 'bar',
    data: {
      datasets: [{
        data: [24, 92, 77, 90, 91, 78, 28, 49, 23, 81, 15, 97, 94, 16, 99, 61, 38, 34, 48, 3, 5, 21, 27, 4, 33, 40, 46, 47, 48, 18],
        borderWidth: 0,
        backgroundColor: '#8897AA'
      }],
      labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        display: false
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });
  var chart8 = new Chart(document.getElementById('statistics-chart-8').getContext("2d"), {
    type: 'pie',
    data: {
      labels: ['18 - 24', '25 - 34', '34 - 45', '45+'],
      datasets: [{
        data: [1225, 654, 211, 402],
        backgroundColor: ['rgba(99,125,138,0.5)', 'rgba(28,151,244,0.5)', 'rgba(2,188,119,0.5)', 'rgba(206, 221, 54, 0.5)'],
        borderColor: ['#647c8a', '#2196f3', '#02bc77', 'rgba(206, 221, 54, 1)'],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      },
      legend: {
        position: 'right',
        labels: {
          boxWidth: 12
        }
      },
      responsive: false,
      maintainAspectRatio: false
    }
  });

  if ($('html').attr('dir') === 'rtl') {
    $('#type-gadgets-dropdown-menu, #new-users-dropdown-menu, #age-users-dropdown-menu').removeClass('dropdown-menu-right');
  } // Resizing charts


  function resizeCharts() {
    chart1.resize();
    chart2.resize();
    chart3.resize();
    chart4.resize();
    chart5.resize();
    chart6.resize();
    chart7.resize();
    chart8.resize();
  } // Initial resize


  resizeCharts(); // For performance reasons resize charts on delayed resize event

  window.layoutHelpers.on('resize.dashboard-5', resizeCharts);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2Rhc2hib2FyZHNfZGFzaGJvYXJkLTUuanMiXSwibmFtZXMiOlsiJCIsImNoYXJ0MSIsIkNoYXJ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJ0eXBlIiwiZGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJib3JkZXJXaWR0aCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiZmlsbCIsImJvcmRlckRhc2giLCJvcHRpb25zIiwic2NhbGVzIiwieEF4ZXMiLCJncmlkTGluZXMiLCJkaXNwbGF5IiwidGlja3MiLCJmb250Q29sb3IiLCJhdXRvU2tpcFBhZGRpbmciLCJ5QXhlcyIsIm1heFRpY2tzTGltaXQiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImNoYXJ0MiIsImxlZ2VuZCIsImNoYXJ0MyIsInBvaW50Qm9yZGVyQ29sb3IiLCJwb2ludFJhZGl1cyIsImxpbmVUZW5zaW9uIiwidG9vbHRpcHMiLCJlbmFibGVkIiwiY2hhcnQ0IiwiY2hhcnQ1IiwiY2hhcnQ2IiwicG9zaXRpb24iLCJib3hXaWR0aCIsImNoYXJ0NyIsImNoYXJ0OCIsImF0dHIiLCJyZW1vdmVDbGFzcyIsInJlc2l6ZUNoYXJ0cyIsInJlc2l6ZSIsIndpbmRvdyIsImxheW91dEhlbHBlcnMiLCJvbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsQ0FBQyxDQUFDLFlBQVc7QUFDWCxNQUFJQyxNQUFNLEdBQUcsSUFBSUMsS0FBSixDQUFVQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isb0JBQXhCLEVBQThDQyxVQUE5QyxDQUF5RCxJQUF6RCxDQUFWLEVBQTBFO0FBQ3JGQyxJQUFBQSxJQUFJLEVBQUUsTUFEK0U7QUFFckZDLElBQUFBLElBQUksRUFBRTtBQUNKQyxNQUFBQSxNQUFNLEVBQUUsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixTQUF2QixFQUFrQyxTQUFsQyxFQUE2QyxTQUE3QyxFQUF3RCxTQUF4RCxF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QUFBQSxVQUFVLEVBQUUsS0FmTDtBQWdCUEMsTUFBQUEsbUJBQW1CLEVBQUU7QUFoQmQ7QUFaNEUsR0FBMUUsQ0FBYjs7QUFnQ0EsTUFBSTNCLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVTJDLElBQVYsQ0FBZSxLQUFmLE1BQTBCLEtBQTlCLEVBQXFDO0FBQ25DM0MsSUFBQUEsQ0FBQyxDQUFDLGlGQUFELENBQUQsQ0FBcUY0QyxXQUFyRixDQUFpRyxxQkFBakc7QUFDRCxHQTdSVSxDQStSWDs7O0FBRUEsV0FBU0MsWUFBVCxHQUF3QjtBQUN0QjVDLElBQUFBLE1BQU0sQ0FBQzZDLE1BQVA7QUFDQWxCLElBQUFBLE1BQU0sQ0FBQ2tCLE1BQVA7QUFDQWhCLElBQUFBLE1BQU0sQ0FBQ2dCLE1BQVA7QUFDQVYsSUFBQUEsTUFBTSxDQUFDVSxNQUFQO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ1MsTUFBUDtBQUNBUixJQUFBQSxNQUFNLENBQUNRLE1BQVA7QUFDQUwsSUFBQUEsTUFBTSxDQUFDSyxNQUFQO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ksTUFBUDtBQUNELEdBMVNVLENBNFNYOzs7QUFDQUQsRUFBQUEsWUFBWSxHQTdTRCxDQStTWDs7QUFDQUUsRUFBQUEsTUFBTSxDQUFDQyxhQUFQLENBQXFCQyxFQUFyQixDQUF3QixvQkFBeEIsRUFBOENKLFlBQTlDO0FBQ0QsQ0FqVEEsQ0FBRCIsInNvdXJjZXNDb250ZW50IjpbIiQoZnVuY3Rpb24oKSB7XG4gIHZhciBjaGFydDEgPSBuZXcgQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpc3RpY3MtY2hhcnQtMScpLmdldENvbnRleHQoXCIyZFwiKSwge1xuICAgIHR5cGU6ICdsaW5lJyxcbiAgICBkYXRhOiB7XG4gICAgICBsYWJlbHM6IFsnMjAxNy0wMycsICcyMDE3LTA0JywgJzIwMTctMDUnLCAnMjAxNy0wNicsICcyMDE3LTA3JywgJzIwMTctMDgnLCAnMjAxNy0wOScsICcyMDE3LTEwJywgJzIwMTctMTEnLCAnMjAxNy0xMicsICcyMDE4LTAxJywgJzIwMTgtMDInXSxcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBsYWJlbDogJ1Zpc2l0cycsXG4gICAgICAgIGRhdGE6IFsxNCwgMzcsIDMwLCA0NiwgODAsIDQyLCAzMywgMTMsIDI1LCA2LCA4OCwgOTZdLFxuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgzOCwgMTgwLCAyNTUsIDAuMSknLFxuICAgICAgICBib3JkZXJDb2xvcjogJyMyNkI0RkYnLFxuICAgICAgICBmaWxsOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBsYWJlbDogJ1JldHVybnMnLFxuICAgICAgICBkYXRhOiBbNTYsIDE3LCAxOSwgOTYsIDczLCA0NiwgNjcsIDQwLCA3NywgNDMsIDY0LCA1NF0sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBib3JkZXJEYXNoOiBbNSwgNV0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMTM2LCAxNTEsIDE3MCwgMC4xKScsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzg4OTdhYSdcbiAgICAgIH1dLFxuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgc2NhbGVzOiB7XG4gICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBmb250Q29sb3I6ICcjYWFhJyxcbiAgICAgICAgICAgIGF1dG9Ta2lwUGFkZGluZzogNTBcbiAgICAgICAgICB9XG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgZm9udENvbG9yOiAnI2FhYScsXG4gICAgICAgICAgICBtYXhUaWNrc0xpbWl0OiA1XG4gICAgICAgICAgfVxuICAgICAgICB9XVxuICAgICAgfSxcblxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0MiA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC0yJykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ2JhcicsXG4gICAgZGF0YToge1xuICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIGRhdGE6IFsyNCwgOTIsIDc3LCA5MCwgOTEsIDc4LCAyOCwgNDksIDIzLCA4MSwgMTUsIDk3LCA5NCwgMTYsIDk5LCA2MSxcbiAgICAgICAgICAzOCwgMzQsIDQ4LCAzLCA1LCAyMSwgMjcsIDQsIDMzLCA0MCwgNDYsIDQ3LCA0OCwgMThcbiAgICAgICAgXSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM2NzNBQjcnLFxuICAgICAgfV0sXG4gICAgICBsYWJlbHM6IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXVxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBjaGFydDMgPSBuZXcgQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpc3RpY3MtY2hhcnQtMycpLmdldENvbnRleHQoXCIyZFwiKSwge1xuICAgIHR5cGU6ICdsaW5lJyxcbiAgICBkYXRhOiB7XG4gICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgZGF0YTogWzI0LCA5MiwgNzcsIDkwLCA5MSwgNzgsIDI4LCA0OSwgMjMsIDgxLCAxNSwgOTcsIDk0LCAxNiwgOTksIDYxLFxuICAgICAgICAgIDM4LCAzNCwgNDgsIDMsIDUsIDIxLCAyNywgNCwgMzMsIDQwLCA0NiwgNDcsIDQ4LCAxOFxuICAgICAgICBdLFxuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzAwOTY4OCcsXG4gICAgICAgIHBvaW50Qm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgcG9pbnRSYWRpdXM6IDEsXG4gICAgICAgIGxpbmVUZW5zaW9uOiAwXG4gICAgICB9XSxcbiAgICAgIGxhYmVsczogWycnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJyddXG4gICAgfSxcblxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNjYWxlczoge1xuICAgICAgICB4QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgfV0sXG4gICAgICAgIHlBeGVzOiBbe1xuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICByZXNwb25zaXZlOiBmYWxzZSxcbiAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlXG4gICAgfVxuICB9KTtcblxuICB2YXIgY2hhcnQ0ID0gbmV3IENoYXJ0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0aXN0aWNzLWNoYXJ0LTQnKS5nZXRDb250ZXh0KFwiMmRcIiksIHtcbiAgICB0eXBlOiAnbGluZScsXG4gICAgZGF0YToge1xuICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIGRhdGE6IFsyNCwgOTIsIDc3LCA5MCwgOTEsIDc4LCAyOCwgNDksIDIzLCA4MSwgMTUsIDk3LCA5NCwgMTYsIDk5LCA2MSxcbiAgICAgICAgICAzOCwgMzQsIDQ4LCAzLCA1LCAyMSwgMjcsIDQsIDMzLCA0MCwgNDYsIDQ3LCA0OCwgNjBcbiAgICAgICAgXSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjA2LCAyMjEsIDU0LCAwKScsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyMDYsIDIyMSwgNTQsIDEpJyxcbiAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICBwb2ludFJhZGl1czogMSxcbiAgICAgICAgbGluZVRlbnNpb246IDBcbiAgICAgIH1dLFxuICAgICAgbGFiZWxzOiBbJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJ11cbiAgICB9LFxuXG4gICAgb3B0aW9uczoge1xuICAgICAgc2NhbGVzOiB7XG4gICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICB9XSxcbiAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0b29sdGlwczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBjaGFydDUgPSBuZXcgQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpc3RpY3MtY2hhcnQtNScpLmdldENvbnRleHQoXCIyZFwiKSwge1xuICAgIHR5cGU6ICdsaW5lJyxcbiAgICBkYXRhOiB7XG4gICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgZGF0YTogWzI0LCA5MiwgNzcsIDkwLCA5MSwgNzgsIDI4LCA0OSwgMjMsIDgxLCAxNSwgOTcsIDk0LCAxNiwgOTksIDYxLFxuICAgICAgICAgIDM4LCAzNCwgNDgsIDMsIDUsIDIxLCAyNywgNCwgMzMsIDQwLCA0NiwgNDcsIDQ4LCA2MFxuICAgICAgICBdLFxuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgxMzYsIDE1MSwgMTcwLCAuMiknLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMTM2LCAxNTEsIDE3MCwgMSknLFxuICAgICAgICBwb2ludEJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvaW50UmFkaXVzOiAxLFxuICAgICAgICBsaW5lVGVuc2lvbjogMFxuICAgICAgfV0sXG4gICAgICBsYWJlbHM6IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXVxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0NiA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC02JykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ3BpZScsXG4gICAgZGF0YToge1xuICAgICAgbGFiZWxzOiBbJ0Rlc2t0b3BzJywgJ1NtYXJ0cGhvbmVzJywgJ1RhYmxldHMnXSxcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBkYXRhOiBbMTIyNSwgNjU0LCAyMTFdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFsncmdiYSg5OSwxMjUsMTM4LDAuNSknLCAncmdiYSgyOCwxNTEsMjQ0LDAuNSknLCAncmdiYSgyLDE4OCwxMTksMC41KSddLFxuICAgICAgICBib3JkZXJDb2xvcjogWycjNjQ3YzhhJywgJyMyMTk2ZjMnLCAnIzAyYmM3NyddLFxuICAgICAgICBib3JkZXJXaWR0aDogMVxuICAgICAgfV1cbiAgICB9LFxuXG4gICAgb3B0aW9uczoge1xuICAgICAgc2NhbGVzOiB7XG4gICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICB9XSxcbiAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIGJveFdpZHRoOiAxMlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNoYXJ0NyA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGlzdGljcy1jaGFydC03JykuZ2V0Q29udGV4dChcIjJkXCIpLCB7XG4gICAgdHlwZTogJ2JhcicsXG4gICAgZGF0YToge1xuICAgICAgZGF0YXNldHM6IFt7XG4gICAgICAgIGRhdGE6IFsyNCwgOTIsIDc3LCA5MCwgOTEsIDc4LCAyOCwgNDksIDIzLCA4MSwgMTUsIDk3LCA5NCwgMTYsIDk5LCA2MSxcbiAgICAgICAgICAzOCwgMzQsIDQ4LCAzLCA1LCAyMSwgMjcsIDQsIDMzLCA0MCwgNDYsIDQ3LCA0OCwgMThcbiAgICAgICAgXSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM4ODk3QUEnLFxuICAgICAgfV0sXG4gICAgICBsYWJlbHM6IFsnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnXVxuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIH1dLFxuICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICB9XVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBjaGFydDggPSBuZXcgQ2hhcnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpc3RpY3MtY2hhcnQtOCcpLmdldENvbnRleHQoXCIyZFwiKSwge1xuICAgIHR5cGU6ICdwaWUnLFxuICAgIGRhdGE6IHtcbiAgICAgIGxhYmVsczogWycxOCAtIDI0JywgJzI1IC0gMzQnLCAnMzQgLSA0NScsICc0NSsnXSxcbiAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICBkYXRhOiBbMTIyNSwgNjU0LCAyMTEsIDQwMl0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogWydyZ2JhKDk5LDEyNSwxMzgsMC41KScsICdyZ2JhKDI4LDE1MSwyNDQsMC41KScsICdyZ2JhKDIsMTg4LDExOSwwLjUpJywgJ3JnYmEoMjA2LCAyMjEsIDU0LCAwLjUpJ10sXG4gICAgICAgIGJvcmRlckNvbG9yOiBbJyM2NDdjOGEnLCAnIzIxOTZmMycsICcjMDJiYzc3JywgJ3JnYmEoMjA2LCAyMjEsIDU0LCAxKSddLFxuICAgICAgICBib3JkZXJXaWR0aDogMVxuICAgICAgfV1cbiAgICB9LFxuXG4gICAgb3B0aW9uczoge1xuICAgICAgc2NhbGVzOiB7XG4gICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICB9XSxcbiAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIGJveFdpZHRoOiAxMlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCQoJ2h0bWwnKS5hdHRyKCdkaXInKSA9PT0gJ3J0bCcpIHtcbiAgICAkKCcjdHlwZS1nYWRnZXRzLWRyb3Bkb3duLW1lbnUsICNuZXctdXNlcnMtZHJvcGRvd24tbWVudSwgI2FnZS11c2Vycy1kcm9wZG93bi1tZW51JykucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnKTtcbiAgfVxuXG4gIC8vIFJlc2l6aW5nIGNoYXJ0c1xuXG4gIGZ1bmN0aW9uIHJlc2l6ZUNoYXJ0cygpIHtcbiAgICBjaGFydDEucmVzaXplKCk7XG4gICAgY2hhcnQyLnJlc2l6ZSgpO1xuICAgIGNoYXJ0My5yZXNpemUoKTtcbiAgICBjaGFydDQucmVzaXplKCk7XG4gICAgY2hhcnQ1LnJlc2l6ZSgpO1xuICAgIGNoYXJ0Ni5yZXNpemUoKTtcbiAgICBjaGFydDcucmVzaXplKCk7XG4gICAgY2hhcnQ4LnJlc2l6ZSgpO1xuICB9XG5cbiAgLy8gSW5pdGlhbCByZXNpemVcbiAgcmVzaXplQ2hhcnRzKCk7XG5cbiAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgcmVzaXplIGNoYXJ0cyBvbiBkZWxheWVkIHJlc2l6ZSBldmVudFxuICB3aW5kb3cubGF5b3V0SGVscGVycy5vbigncmVzaXplLmRhc2hib2FyZC01JywgcmVzaXplQ2hhcnRzKTtcbn0pO1xuIl0sImZpbGUiOiJqcy9kYXNoYm9hcmRzX2Rhc2hib2FyZC01LmVzNS5qcyJ9
