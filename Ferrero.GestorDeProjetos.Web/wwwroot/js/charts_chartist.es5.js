"use strict";

$(function () {
  new Chartist.Line('#chartist-graph', {
    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    series: [[8, 14, 5, 13, 12], [7, 8, 1, 3, 1], [5, 12, 1, 9, 7]]
  }, {
    fullWidth: true,
    chartPadding: {
      right: 40
    }
  });
  new Chartist.Line('#chartist-bi-polar', {
    labels: [1, 2, 3, 4, 5, 6, 7, 8],
    series: [[1, -1, -2, 0, 2, -1, -2, -1], [-2, -1, 0, -3, -2, 1, -3, 2], [2, -1, -1, -3, -2, 0, -1, 1], [1, -3, 2, -3, -3, 2, -2, -3]]
  }, {
    high: 3,
    low: -3,
    showArea: true,
    showLine: false,
    showPoint: false,
    fullWidth: true,
    axisX: {
      showLabel: false,
      showGrid: false
    }
  });
  new Chartist.Bar('#chartist-bars', {
    labels: ['First quarter of the year', 'Second quarter of the year', 'Third quarter of the year', 'Fourth quarter of the year'],
    series: [[75177, 30327, 33902, 45922], [67592, 31235, 64863, 78175], [1978, 1951, 8121, 8132]]
  }, {
    seriesBarDistance: 10,
    axisX: {
      offset: 60
    },
    axisY: {
      offset: 80,
      scaleMinSpace: 15,
      labelInterpolationFnc: function labelInterpolationFnc(value) {
        return value + ' CHF';
      }
    }
  });
  new Chartist.Bar('#chartist-h-bars', {
    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    series: [[8, 2, 8, 2, 1, 4, 5], [5, 1, 7, 4, 6, 5, 6]]
  }, {
    seriesBarDistance: 10,
    reverseData: true,
    horizontalBars: true,
    axisY: {
      offset: 70
    }
  });

  function sum(a, b) {
    return a + b;
  }

  var pieData = {
    series: [3, 5, 7]
  };
  new Chartist.Pie('#chartist-pie', pieData, {
    labelInterpolationFnc: function labelInterpolationFnc(value) {
      return Math.round(value / pieData.series.reduce(sum) * 100) + '%';
    }
  });
  new Chartist.Pie('#chartist-gauge', {
    series: [20, 10, 30, 40]
  }, {
    donut: true,
    donutWidth: 60,
    startAngle: 270,
    total: 200,
    showLabel: false
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2NoYXJ0c19jaGFydGlzdC5qcyJdLCJuYW1lcyI6WyIkIiwiQ2hhcnRpc3QiLCJMaW5lIiwibGFiZWxzIiwic2VyaWVzIiwiZnVsbFdpZHRoIiwiY2hhcnRQYWRkaW5nIiwicmlnaHQiLCJoaWdoIiwibG93Iiwic2hvd0FyZWEiLCJzaG93TGluZSIsInNob3dQb2ludCIsImF4aXNYIiwic2hvd0xhYmVsIiwic2hvd0dyaWQiLCJCYXIiLCJzZXJpZXNCYXJEaXN0YW5jZSIsIm9mZnNldCIsImF4aXNZIiwic2NhbGVNaW5TcGFjZSIsImxhYmVsSW50ZXJwb2xhdGlvbkZuYyIsInZhbHVlIiwicmV2ZXJzZURhdGEiLCJob3Jpem9udGFsQmFycyIsInN1bSIsImEiLCJiIiwicGllRGF0YSIsIlBpZSIsIk1hdGgiLCJyb3VuZCIsInJlZHVjZSIsImRvbnV0IiwiZG9udXRXaWR0aCIsInN0YXJ0QW5nbGUiLCJ0b3RhbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsQ0FBQyxDQUFDLFlBQVc7QUFDWCxNQUFJQyxRQUFRLENBQUNDLElBQWIsQ0FBa0IsaUJBQWxCLEVBQXFDO0FBQ25DQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixXQUF0QixFQUFtQyxVQUFuQyxFQUErQyxRQUEvQyxDQUQyQjtBQUVuQ0MsSUFBQUEsTUFBTSxFQUFFLENBQ04sQ0FBRSxDQUFGLEVBQUssRUFBTCxFQUFTLENBQVQsRUFBWSxFQUFaLEVBQWdCLEVBQWhCLENBRE0sRUFFTixDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxDQUFkLENBRk0sRUFHTixDQUFFLENBQUYsRUFBSyxFQUFMLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLENBSE07QUFGMkIsR0FBckMsRUFPRztBQUNEQyxJQUFBQSxTQUFTLEVBQUUsSUFEVjtBQUVEQyxJQUFBQSxZQUFZLEVBQUU7QUFDWkMsTUFBQUEsS0FBSyxFQUFFO0FBREs7QUFGYixH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WCxHQUZIO0FBU0QsQ0F2RkEsQ0FBRCIsInNvdXJjZXNDb250ZW50IjpbIiQoZnVuY3Rpb24oKSB7XG4gIG5ldyBDaGFydGlzdC5MaW5lKCcjY2hhcnRpc3QtZ3JhcGgnLCB7XG4gICAgbGFiZWxzOiBbJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknXSxcbiAgICBzZXJpZXM6IFtcbiAgICAgIFsgOCwgMTQsIDUsIDEzLCAxMiBdLFxuICAgICAgWyA3LCA4LCAxLCAzLCAxIF0sXG4gICAgICBbIDUsIDEyLCAxLCA5LCA3IF1cbiAgICBdLFxuICB9LCB7XG4gICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgIGNoYXJ0UGFkZGluZzoge1xuICAgICAgcmlnaHQ6IDQwXG4gICAgfVxuICB9KTtcblxuICBuZXcgQ2hhcnRpc3QuTGluZSgnI2NoYXJ0aXN0LWJpLXBvbGFyJywge1xuICAgIGxhYmVsczogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdLFxuICAgIHNlcmllczogW1xuICAgICAgWyAxLCAtMSwgLTIsIDAsIDIsIC0xLCAtMiwgLTEgXSxcbiAgICAgIFsgLTIsIC0xLCAwLCAtMywgLTIsIDEsIC0zLCAyIF0sXG4gICAgICBbIDIsIC0xLCAtMSwgLTMsIC0yLCAwLCAtMSwgMSBdLFxuICAgICAgWyAxLCAtMywgMiwgLTMsIC0zLCAyLCAtMiwgLTMgXSBdXG4gIH0sIHtcbiAgICBoaWdoOiAzLFxuICAgIGxvdzogLTMsXG4gICAgc2hvd0FyZWE6ICB0cnVlLFxuICAgIHNob3dMaW5lOiAgZmFsc2UsXG4gICAgc2hvd1BvaW50OiBmYWxzZSxcbiAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgYXhpc1g6IHtcbiAgICAgIHNob3dMYWJlbDogZmFsc2UsXG4gICAgICBzaG93R3JpZDogIGZhbHNlXG4gICAgfVxuICB9KTtcblxuICBuZXcgQ2hhcnRpc3QuQmFyKCcjY2hhcnRpc3QtYmFycycsIHtcbiAgICBsYWJlbHM6IFsnRmlyc3QgcXVhcnRlciBvZiB0aGUgeWVhcicsICdTZWNvbmQgcXVhcnRlciBvZiB0aGUgeWVhcicsICdUaGlyZCBxdWFydGVyIG9mIHRoZSB5ZWFyJywgJ0ZvdXJ0aCBxdWFydGVyIG9mIHRoZSB5ZWFyJ10sXG4gICAgc2VyaWVzOiBbXG4gICAgICBbIDc1MTc3LCAzMDMyNywgMzM5MDIsIDQ1OTIyIF0sXG4gICAgICBbIDY3NTkyLCAzMTIzNSwgNjQ4NjMsIDc4MTc1IF0sXG4gICAgICBbIDE5NzgsIDE5NTEsIDgxMjEsIDgxMzIgXSBdXG4gIH0sIHtcbiAgICBzZXJpZXNCYXJEaXN0YW5jZTogMTAsXG4gICAgYXhpc1g6IHsgb2Zmc2V0OiA2MCB9LFxuICAgIGF4aXNZOiB7XG4gICAgICBvZmZzZXQ6ICAgICAgICA4MCxcbiAgICAgIHNjYWxlTWluU3BhY2U6IDE1LFxuXG4gICAgICBsYWJlbEludGVycG9sYXRpb25GbmM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSArICcgQ0hGJztcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgbmV3IENoYXJ0aXN0LkJhcignI2NoYXJ0aXN0LWgtYmFycycsIHtcbiAgICBsYWJlbHM6IFsnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheScsICdTdW5kYXknXSxcbiAgICBzZXJpZXM6IFtcbiAgICAgIFsgOCwgMiwgOCwgMiwgMSwgNCwgNSBdLFxuICAgICAgWyA1LCAxLCA3LCA0LCA2LCA1LCA2IF0gXVxuICB9LCB7XG4gICAgc2VyaWVzQmFyRGlzdGFuY2U6IDEwLFxuICAgIHJldmVyc2VEYXRhOiAgICAgICB0cnVlLFxuICAgIGhvcml6b250YWxCYXJzOiAgICB0cnVlLFxuICAgIGF4aXNZOiAgICAgICAgICAgICB7IG9mZnNldDogNzAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzdW0oYSwgYikge1xuICAgIHJldHVybiBhICsgYjtcbiAgfVxuICB2YXIgcGllRGF0YSA9IHtcbiAgICBzZXJpZXM6IFsgMywgNSwgNyBdLFxuICB9O1xuICBuZXcgQ2hhcnRpc3QuUGllKCcjY2hhcnRpc3QtcGllJywgcGllRGF0YSwge1xuICAgIGxhYmVsSW50ZXJwb2xhdGlvbkZuYzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gcGllRGF0YS5zZXJpZXMucmVkdWNlKHN1bSkgKiAxMDApICsgJyUnO1xuICAgIH1cbiAgfSk7XG5cbiAgbmV3IENoYXJ0aXN0LlBpZSgnI2NoYXJ0aXN0LWdhdWdlJywge1xuICAgIHNlcmllczogWzIwLCAxMCwgMzAsIDQwXSxcbiAgfSwge1xuICAgIGRvbnV0OiAgICAgIHRydWUsXG4gICAgZG9udXRXaWR0aDogNjAsXG4gICAgc3RhcnRBbmdsZTogMjcwLFxuICAgIHRvdGFsOiAgICAgIDIwMCxcbiAgICBzaG93TGFiZWw6ICBmYWxzZVxuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJqcy9jaGFydHNfY2hhcnRpc3QuZXM1LmpzIn0=
