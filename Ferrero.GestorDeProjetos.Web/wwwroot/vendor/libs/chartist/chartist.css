.default-style .ct-label {
  fill: #4E5155;
  color: #4E5155;
  font-size: 11px;
  line-height: 1; }

.default-style .ct-chart-line .ct-label,
.default-style .ct-chart-bar .ct-label {
  display: block;
  display: -ms-flexbox;
  display: flex; }

.default-style .ct-chart-pie .ct-label,
.default-style .ct-chart-donut .ct-label {
  dominant-baseline: central; }

.default-style .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.default-style .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.default-style .ct-label.ct-vertical.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-end;
  justify-content: flex-end;
  text-align: right;
  text-anchor: end; }

.default-style .ct-label.ct-vertical.ct-end {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.default-style .ct-chart-bar .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: center;
  justify-content: center;
  text-align: center;
  text-anchor: start; }

.default-style .ct-chart-bar .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: center;
  justify-content: center;
  text-align: center;
  text-anchor: start; }

.default-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.default-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.default-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start {
  -ms-flex-align: center;
  align-items: center;
  -ms-flex-pack: flex-end;
  justify-content: flex-end;
  text-align: right;
  text-anchor: end; }

.default-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end {
  -ms-flex-align: center;
  align-items: center;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: end; }

.default-style .ct-grid {
  stroke: rgba(24, 28, 33, 0.1);
  stroke-width: 1px;
  stroke-dasharray: 2px; }

.default-style .ct-grid-background {
  fill: none; }

.default-style .ct-point {
  stroke-width: 7px;
  stroke-linecap: round; }

.default-style .ct-line {
  fill: none;
  stroke-width: 1px; }

.default-style .ct-area {
  stroke: none;
  fill-opacity: 0.1; }

.default-style .ct-bar {
  fill: none;
  stroke-width: 10px; }

.default-style .ct-slice-donut {
  fill: none;
  stroke-width: 60px; }

.default-style .ct-series-a .ct-point, .default-style .ct-series-a .ct-line, .default-style .ct-series-a .ct-bar, .default-style .ct-series-a .ct-slice-donut {
  stroke: #647c8a; }

.default-style .ct-series-a .ct-slice-pie, .default-style .ct-series-a .ct-slice-donut-solid, .default-style .ct-series-a .ct-area {
  fill: #647c8a; }

.default-style .ct-series-b .ct-point, .default-style .ct-series-b .ct-line, .default-style .ct-series-b .ct-bar, .default-style .ct-series-b .ct-slice-donut {
  stroke: #3f51b5; }

.default-style .ct-series-b .ct-slice-pie, .default-style .ct-series-b .ct-slice-donut-solid, .default-style .ct-series-b .ct-area {
  fill: #3f51b5; }

.default-style .ct-series-c .ct-point, .default-style .ct-series-c .ct-line, .default-style .ct-series-c .ct-bar, .default-style .ct-series-c .ct-slice-donut {
  stroke: #2196f3; }

.default-style .ct-series-c .ct-slice-pie, .default-style .ct-series-c .ct-slice-donut-solid, .default-style .ct-series-c .ct-area {
  fill: #2196f3; }

.default-style .ct-series-d .ct-point, .default-style .ct-series-d .ct-line, .default-style .ct-series-d .ct-bar, .default-style .ct-series-d .ct-slice-donut {
  stroke: #00b862; }

.default-style .ct-series-d .ct-slice-pie, .default-style .ct-series-d .ct-slice-donut-solid, .default-style .ct-series-d .ct-area {
  fill: #00b862; }

.default-style .ct-series-e .ct-point, .default-style .ct-series-e .ct-line, .default-style .ct-series-e .ct-bar, .default-style .ct-series-e .ct-slice-donut {
  stroke: #afdf0a; }

.default-style .ct-series-e .ct-slice-pie, .default-style .ct-series-e .ct-slice-donut-solid, .default-style .ct-series-e .ct-area {
  fill: #afdf0a; }

.default-style .ct-series-f .ct-point, .default-style .ct-series-f .ct-line, .default-style .ct-series-f .ct-bar, .default-style .ct-series-f .ct-slice-donut {
  stroke: #a7b61a; }

.default-style .ct-series-f .ct-slice-pie, .default-style .ct-series-f .ct-slice-donut-solid, .default-style .ct-series-f .ct-area {
  fill: #a7b61a; }

.default-style .ct-series-g .ct-point, .default-style .ct-series-g .ct-line, .default-style .ct-series-g .ct-bar, .default-style .ct-series-g .ct-slice-donut {
  stroke: #f3e562; }

.default-style .ct-series-g .ct-slice-pie, .default-style .ct-series-g .ct-slice-donut-solid, .default-style .ct-series-g .ct-area {
  fill: #f3e562; }

.default-style .ct-series-h .ct-point, .default-style .ct-series-h .ct-line, .default-style .ct-series-h .ct-bar, .default-style .ct-series-h .ct-slice-donut {
  stroke: #ff9800; }

.default-style .ct-series-h .ct-slice-pie, .default-style .ct-series-h .ct-slice-donut-solid, .default-style .ct-series-h .ct-area {
  fill: #ff9800; }

.default-style .ct-series-i .ct-point, .default-style .ct-series-i .ct-line, .default-style .ct-series-i .ct-bar, .default-style .ct-series-i .ct-slice-donut {
  stroke: #ff5722; }

.default-style .ct-series-i .ct-slice-pie, .default-style .ct-series-i .ct-slice-donut-solid, .default-style .ct-series-i .ct-area {
  fill: #ff5722; }

.default-style .ct-series-j .ct-point, .default-style .ct-series-j .ct-line, .default-style .ct-series-j .ct-bar, .default-style .ct-series-j .ct-slice-donut {
  stroke: #ff4514; }

.default-style .ct-series-j .ct-slice-pie, .default-style .ct-series-j .ct-slice-donut-solid, .default-style .ct-series-j .ct-area {
  fill: #ff4514; }

.default-style .ct-series-k .ct-point, .default-style .ct-series-k .ct-line, .default-style .ct-series-k .ct-bar, .default-style .ct-series-k .ct-slice-donut {
  stroke: #2597FB; }

.default-style .ct-series-k .ct-slice-pie, .default-style .ct-series-k .ct-slice-donut-solid, .default-style .ct-series-k .ct-area {
  fill: #2597FB; }

.default-style .ct-series-l .ct-point, .default-style .ct-series-l .ct-line, .default-style .ct-series-l .ct-bar, .default-style .ct-series-l .ct-slice-donut {
  stroke: #65EBFD; }

.default-style .ct-series-l .ct-slice-pie, .default-style .ct-series-l .ct-slice-donut-solid, .default-style .ct-series-l .ct-area {
  fill: #65EBFD; }

.default-style .ct-series-m .ct-point, .default-style .ct-series-m .ct-line, .default-style .ct-series-m .ct-bar, .default-style .ct-series-m .ct-slice-donut {
  stroke: #99FDD0; }

.default-style .ct-series-m .ct-slice-pie, .default-style .ct-series-m .ct-slice-donut-solid, .default-style .ct-series-m .ct-area {
  fill: #99FDD0; }

.default-style .ct-series-n .ct-point, .default-style .ct-series-n .ct-line, .default-style .ct-series-n .ct-bar, .default-style .ct-series-n .ct-slice-donut {
  stroke: #FCEE4B; }

.default-style .ct-series-n .ct-slice-pie, .default-style .ct-series-n .ct-slice-donut-solid, .default-style .ct-series-n .ct-area {
  fill: #FCEE4B; }

.default-style .ct-series-o .ct-point, .default-style .ct-series-o .ct-line, .default-style .ct-series-o .ct-bar, .default-style .ct-series-o .ct-slice-donut {
  stroke: #FEFCFA; }

.default-style .ct-series-o .ct-slice-pie, .default-style .ct-series-o .ct-slice-donut-solid, .default-style .ct-series-o .ct-area {
  fill: #FEFCFA; }

.default-style .ct-square {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-square:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 100%; }
  .default-style .ct-square:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-square > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-minor-second {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-minor-second:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 93.75%; }
  .default-style .ct-minor-second:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-minor-second > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-second {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-second:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 88.88889%; }
  .default-style .ct-major-second:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-second > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-minor-third {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-minor-third:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 83.33333%; }
  .default-style .ct-minor-third:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-minor-third > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-third {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-third:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 80%; }
  .default-style .ct-major-third:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-third > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-perfect-fourth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-perfect-fourth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 75%; }
  .default-style .ct-perfect-fourth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-perfect-fourth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-perfect-fifth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-perfect-fifth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 66.66667%; }
  .default-style .ct-perfect-fifth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-perfect-fifth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-minor-sixth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-minor-sixth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 62.5%; }
  .default-style .ct-minor-sixth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-minor-sixth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-golden-section {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-golden-section:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 61.8047%; }
  .default-style .ct-golden-section:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-golden-section > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-sixth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-sixth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 60%; }
  .default-style .ct-major-sixth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-sixth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-minor-seventh {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-minor-seventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 56.25%; }
  .default-style .ct-minor-seventh:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-minor-seventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-seventh {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-seventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 53.33333%; }
  .default-style .ct-major-seventh:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-seventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-octave {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-octave:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 50%; }
  .default-style .ct-octave:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-octave > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-tenth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-tenth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 40%; }
  .default-style .ct-major-tenth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-tenth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-eleventh {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-eleventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 37.5%; }
  .default-style .ct-major-eleventh:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-eleventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-major-twelfth {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-major-twelfth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 33.33333%; }
  .default-style .ct-major-twelfth:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-major-twelfth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.default-style .ct-double-octave {
  display: block;
  position: relative;
  width: 100%; }
  .default-style .ct-double-octave:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 25%; }
  .default-style .ct-double-octave:after {
    content: "";
    display: table;
    clear: both; }
  .default-style .ct-double-octave > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-label {
  fill: #4E5155;
  color: #4E5155;
  font-size: 11px;
  line-height: 1; }

.material-style .ct-chart-line .ct-label,
.material-style .ct-chart-bar .ct-label {
  display: block;
  display: -ms-flexbox;
  display: flex; }

.material-style .ct-chart-pie .ct-label,
.material-style .ct-chart-donut .ct-label {
  dominant-baseline: central; }

.material-style .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.material-style .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.material-style .ct-label.ct-vertical.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-end;
  justify-content: flex-end;
  text-align: right;
  text-anchor: end; }

.material-style .ct-label.ct-vertical.ct-end {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.material-style .ct-chart-bar .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: center;
  justify-content: center;
  text-align: center;
  text-anchor: start; }

.material-style .ct-chart-bar .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: center;
  justify-content: center;
  text-align: center;
  text-anchor: start; }

.material-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-start {
  -ms-flex-align: flex-end;
  align-items: flex-end;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.material-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-horizontal.ct-end {
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: start; }

.material-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-start {
  -ms-flex-align: center;
  align-items: center;
  -ms-flex-pack: flex-end;
  justify-content: flex-end;
  text-align: right;
  text-anchor: end; }

.material-style .ct-chart-bar.ct-horizontal-bars .ct-label.ct-vertical.ct-end {
  -ms-flex-align: center;
  align-items: center;
  -ms-flex-pack: flex-start;
  justify-content: flex-start;
  text-align: left;
  text-anchor: end; }

.material-style .ct-grid {
  stroke: rgba(24, 28, 33, 0.1);
  stroke-width: 1px;
  stroke-dasharray: 2px; }

.material-style .ct-grid-background {
  fill: none; }

.material-style .ct-point {
  stroke-width: 7px;
  stroke-linecap: round; }

.material-style .ct-line {
  fill: none;
  stroke-width: 1px; }

.material-style .ct-area {
  stroke: none;
  fill-opacity: 0.1; }

.material-style .ct-bar {
  fill: none;
  stroke-width: 10px; }

.material-style .ct-slice-donut {
  fill: none;
  stroke-width: 60px; }

.material-style .ct-series-a .ct-point, .material-style .ct-series-a .ct-line, .material-style .ct-series-a .ct-bar, .material-style .ct-series-a .ct-slice-donut {
  stroke: #647c8a; }

.material-style .ct-series-a .ct-slice-pie, .material-style .ct-series-a .ct-slice-donut-solid, .material-style .ct-series-a .ct-area {
  fill: #647c8a; }

.material-style .ct-series-b .ct-point, .material-style .ct-series-b .ct-line, .material-style .ct-series-b .ct-bar, .material-style .ct-series-b .ct-slice-donut {
  stroke: #3f51b5; }

.material-style .ct-series-b .ct-slice-pie, .material-style .ct-series-b .ct-slice-donut-solid, .material-style .ct-series-b .ct-area {
  fill: #3f51b5; }

.material-style .ct-series-c .ct-point, .material-style .ct-series-c .ct-line, .material-style .ct-series-c .ct-bar, .material-style .ct-series-c .ct-slice-donut {
  stroke: #2196f3; }

.material-style .ct-series-c .ct-slice-pie, .material-style .ct-series-c .ct-slice-donut-solid, .material-style .ct-series-c .ct-area {
  fill: #2196f3; }

.material-style .ct-series-d .ct-point, .material-style .ct-series-d .ct-line, .material-style .ct-series-d .ct-bar, .material-style .ct-series-d .ct-slice-donut {
  stroke: #00b862; }

.material-style .ct-series-d .ct-slice-pie, .material-style .ct-series-d .ct-slice-donut-solid, .material-style .ct-series-d .ct-area {
  fill: #00b862; }

.material-style .ct-series-e .ct-point, .material-style .ct-series-e .ct-line, .material-style .ct-series-e .ct-bar, .material-style .ct-series-e .ct-slice-donut {
  stroke: #afdf0a; }

.material-style .ct-series-e .ct-slice-pie, .material-style .ct-series-e .ct-slice-donut-solid, .material-style .ct-series-e .ct-area {
  fill: #afdf0a; }

.material-style .ct-series-f .ct-point, .material-style .ct-series-f .ct-line, .material-style .ct-series-f .ct-bar, .material-style .ct-series-f .ct-slice-donut {
  stroke: #a7b61a; }

.material-style .ct-series-f .ct-slice-pie, .material-style .ct-series-f .ct-slice-donut-solid, .material-style .ct-series-f .ct-area {
  fill: #a7b61a; }

.material-style .ct-series-g .ct-point, .material-style .ct-series-g .ct-line, .material-style .ct-series-g .ct-bar, .material-style .ct-series-g .ct-slice-donut {
  stroke: #f3e562; }

.material-style .ct-series-g .ct-slice-pie, .material-style .ct-series-g .ct-slice-donut-solid, .material-style .ct-series-g .ct-area {
  fill: #f3e562; }

.material-style .ct-series-h .ct-point, .material-style .ct-series-h .ct-line, .material-style .ct-series-h .ct-bar, .material-style .ct-series-h .ct-slice-donut {
  stroke: #ff9800; }

.material-style .ct-series-h .ct-slice-pie, .material-style .ct-series-h .ct-slice-donut-solid, .material-style .ct-series-h .ct-area {
  fill: #ff9800; }

.material-style .ct-series-i .ct-point, .material-style .ct-series-i .ct-line, .material-style .ct-series-i .ct-bar, .material-style .ct-series-i .ct-slice-donut {
  stroke: #ff5722; }

.material-style .ct-series-i .ct-slice-pie, .material-style .ct-series-i .ct-slice-donut-solid, .material-style .ct-series-i .ct-area {
  fill: #ff5722; }

.material-style .ct-series-j .ct-point, .material-style .ct-series-j .ct-line, .material-style .ct-series-j .ct-bar, .material-style .ct-series-j .ct-slice-donut {
  stroke: #ff4514; }

.material-style .ct-series-j .ct-slice-pie, .material-style .ct-series-j .ct-slice-donut-solid, .material-style .ct-series-j .ct-area {
  fill: #ff4514; }

.material-style .ct-series-k .ct-point, .material-style .ct-series-k .ct-line, .material-style .ct-series-k .ct-bar, .material-style .ct-series-k .ct-slice-donut {
  stroke: #2597FB; }

.material-style .ct-series-k .ct-slice-pie, .material-style .ct-series-k .ct-slice-donut-solid, .material-style .ct-series-k .ct-area {
  fill: #2597FB; }

.material-style .ct-series-l .ct-point, .material-style .ct-series-l .ct-line, .material-style .ct-series-l .ct-bar, .material-style .ct-series-l .ct-slice-donut {
  stroke: #65EBFD; }

.material-style .ct-series-l .ct-slice-pie, .material-style .ct-series-l .ct-slice-donut-solid, .material-style .ct-series-l .ct-area {
  fill: #65EBFD; }

.material-style .ct-series-m .ct-point, .material-style .ct-series-m .ct-line, .material-style .ct-series-m .ct-bar, .material-style .ct-series-m .ct-slice-donut {
  stroke: #99FDD0; }

.material-style .ct-series-m .ct-slice-pie, .material-style .ct-series-m .ct-slice-donut-solid, .material-style .ct-series-m .ct-area {
  fill: #99FDD0; }

.material-style .ct-series-n .ct-point, .material-style .ct-series-n .ct-line, .material-style .ct-series-n .ct-bar, .material-style .ct-series-n .ct-slice-donut {
  stroke: #FCEE4B; }

.material-style .ct-series-n .ct-slice-pie, .material-style .ct-series-n .ct-slice-donut-solid, .material-style .ct-series-n .ct-area {
  fill: #FCEE4B; }

.material-style .ct-series-o .ct-point, .material-style .ct-series-o .ct-line, .material-style .ct-series-o .ct-bar, .material-style .ct-series-o .ct-slice-donut {
  stroke: #FEFCFA; }

.material-style .ct-series-o .ct-slice-pie, .material-style .ct-series-o .ct-slice-donut-solid, .material-style .ct-series-o .ct-area {
  fill: #FEFCFA; }

.material-style .ct-square {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-square:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 100%; }
  .material-style .ct-square:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-square > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-minor-second {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-minor-second:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 93.75%; }
  .material-style .ct-minor-second:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-minor-second > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-second {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-second:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 88.88889%; }
  .material-style .ct-major-second:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-second > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-minor-third {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-minor-third:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 83.33333%; }
  .material-style .ct-minor-third:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-minor-third > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-third {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-third:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 80%; }
  .material-style .ct-major-third:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-third > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-perfect-fourth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-perfect-fourth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 75%; }
  .material-style .ct-perfect-fourth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-perfect-fourth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-perfect-fifth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-perfect-fifth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 66.66667%; }
  .material-style .ct-perfect-fifth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-perfect-fifth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-minor-sixth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-minor-sixth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 62.5%; }
  .material-style .ct-minor-sixth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-minor-sixth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-golden-section {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-golden-section:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 61.8047%; }
  .material-style .ct-golden-section:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-golden-section > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-sixth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-sixth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 60%; }
  .material-style .ct-major-sixth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-sixth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-minor-seventh {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-minor-seventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 56.25%; }
  .material-style .ct-minor-seventh:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-minor-seventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-seventh {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-seventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 53.33333%; }
  .material-style .ct-major-seventh:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-seventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-octave {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-octave:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 50%; }
  .material-style .ct-octave:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-octave > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-tenth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-tenth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 40%; }
  .material-style .ct-major-tenth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-tenth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-eleventh {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-eleventh:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 37.5%; }
  .material-style .ct-major-eleventh:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-eleventh > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-major-twelfth {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-major-twelfth:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 33.33333%; }
  .material-style .ct-major-twelfth:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-major-twelfth > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

.material-style .ct-double-octave {
  display: block;
  position: relative;
  width: 100%; }
  .material-style .ct-double-octave:before {
    display: block;
    float: left;
    content: "";
    width: 0;
    height: 0;
    padding-bottom: 25%; }
  .material-style .ct-double-octave:after {
    content: "";
    display: table;
    clear: both; }
  .material-style .ct-double-octave > svg {
    display: block;
    position: absolute;
    top: 0;
    left: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
